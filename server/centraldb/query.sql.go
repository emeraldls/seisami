// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package centraldb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const consumeDesktopLoginCode = `-- name: ConsumeDesktopLoginCode :one
UPDATE desktop_login_codes
SET used_at = NOW()
WHERE code = $1
  AND state = $2
  AND used_at IS NULL
  AND expires_at > NOW()
RETURNING code, user_id, state, created_at, expires_at, used_at
`

type ConsumeDesktopLoginCodeParams struct {
	Code  string
	State string
}

func (q *Queries) ConsumeDesktopLoginCode(ctx context.Context, arg ConsumeDesktopLoginCodeParams) (DesktopLoginCode, error) {
	row := q.db.QueryRow(ctx, consumeDesktopLoginCode, arg.Code, arg.State)
	var i DesktopLoginCode
	err := row.Scan(
		&i.Code,
		&i.UserID,
		&i.State,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const createDesktopLoginCode = `-- name: CreateDesktopLoginCode :one
INSERT INTO desktop_login_codes (code, user_id, state, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING code, user_id, state, created_at, expires_at, used_at
`

type CreateDesktopLoginCodeParams struct {
	Code      string
	UserID    pgtype.UUID
	State     string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateDesktopLoginCode(ctx context.Context, arg CreateDesktopLoginCodeParams) (DesktopLoginCode, error) {
	row := q.db.QueryRow(ctx, createDesktopLoginCode,
		arg.Code,
		arg.UserID,
		arg.State,
		arg.ExpiresAt,
	)
	var i DesktopLoginCode
	err := row.Scan(
		&i.Code,
		&i.UserID,
		&i.State,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id, email, password_hash, created_at, updated_at, reset_token, reset_token_expires_at
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
	)
	return i, err
}

const deleteExpiredDesktopCodes = `-- name: DeleteExpiredDesktopCodes :exec
DELETE FROM desktop_login_codes
WHERE expires_at < NOW()
   OR used_at IS NOT NULL
`

func (q *Queries) DeleteExpiredDesktopCodes(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredDesktopCodes)
	return err
}

const getDesktopLoginCode = `-- name: GetDesktopLoginCode :one
SELECT code, user_id, state, created_at, expires_at, used_at
FROM desktop_login_codes
WHERE code = $1
`

func (q *Queries) GetDesktopLoginCode(ctx context.Context, code string) (DesktopLoginCode, error) {
	row := q.db.QueryRow(ctx, getDesktopLoginCode, code)
	var i DesktopLoginCode
	err := row.Scan(
		&i.Code,
		&i.UserID,
		&i.State,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at, reset_token, reset_token_expires_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, created_at, updated_at, reset_token, reset_token_expires_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
	)
	return i, err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT id, email, password_hash, created_at, updated_at, reset_token, reset_token_expires_at
FROM users
WHERE reset_token = $1
  AND reset_token_expires_at > NOW()
`

func (q *Queries) GetUserByResetToken(ctx context.Context, resetToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByResetToken, resetToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
	)
	return i, err
}

const setPasswordResetToken = `-- name: SetPasswordResetToken :exec
UPDATE users
SET reset_token = $2,
    reset_token_expires_at = $3,
    updated_at = NOW()
WHERE id = $1
`

type SetPasswordResetTokenParams struct {
	ID                  pgtype.UUID
	ResetToken          pgtype.Text
	ResetTokenExpiresAt pgtype.Timestamptz
}

func (q *Queries) SetPasswordResetToken(ctx context.Context, arg SetPasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, setPasswordResetToken, arg.ID, arg.ResetToken, arg.ResetTokenExpiresAt)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $2,
    reset_token = NULL,
    reset_token_expires_at = NULL,
    updated_at = NOW()
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID           pgtype.UUID
	PasswordHash string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.PasswordHash)
	return err
}
