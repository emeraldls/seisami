import { Board as KanbanBoard, moveCard } from "@caldwell619/react-kanban";
import "@caldwell619/react-kanban/dist/styles.css";
import { useEffect, useState } from "react";
import {
  CreateColumn,
  GetBoards,
  ListColumnsByBoard,
  ListTicketsByColumn,
  UpdateTicket,
} from "../../wailsjs/go/main/App";
import { renderColumnHeader, renderCard } from "~/components/notion/components";
import { CustomCard, TicketType } from "~/components/notion/data";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";

const NotionDemo = () => {
  const [board, setBoard] = useState<{ columns: any[] }>({ columns: [] });
  const [newColumnName, setNewColumnName] = useState("");

  async function fetchBoard() {
    const boards = await GetBoards(1, 10);
    if (boards.length === 0) {
      console.log("No boards found");
      return;
    }
    const boardId = boards[0].ID;
    const columns = await ListColumnsByBoard(boardId);
    const boardColumns = await Promise.all(
      columns.map(async (col) => {
        const tickets = await ListTicketsByColumn(col.id);
        const cards: CustomCard[] = tickets.map((t) => ({
          id: t.id,
          title: t.title,
          description: t.description.String,
          assigneeId: t.assignee_id.Int64,
          storyPoints: t.story_points.Int64,
          ticketType: t.ticket_type as TicketType,
          createdAt: new Date(t.created_at),
          prLink: t.pr_link.String,
        }));
        return {
          id: col.id,
          title: col.title,
          cards: cards,
        };
      })
    );
    setBoard({ columns: boardColumns });
  }

  useEffect(() => {
    fetchBoard();
  }, []);

  const handleCardMove = async (
    card: CustomCard,
    source: { fromColumnId: any },
    destination: { toColumnId: any }
  ) => {
    const updatedBoard = moveCard(board, source, destination);
    setBoard(updatedBoard);
    await UpdateTicket(
      card.id,
      card.title,
      card.description ?? ""
    );
  };

  const handleAddColumn = async () => {
    if (newColumnName.trim() === "") return;
    const boards = await GetBoards(1, 1);
    if (boards.length > 0) {
      const boardId = boards[0].ID;
      await CreateColumn(boardId, newColumnName);
      setNewColumnName("");
      fetchBoard();
    }
  };

  return (
    <>
      <div className="p-4">
        <div className="flex gap-2 mb-4">
          <Input
            value={newColumnName}
            onChange={(e) => setNewColumnName(e.target.value)}
            placeholder="New column name"
            className="w-48"
          />
          <Button onClick={handleAddColumn}>Add Column</Button>
        </div>
        <KanbanBoard
          onCardDragEnd={handleCardMove}
          renderColumnHeader={renderColumnHeader}
          renderCard={renderCard}
        >
          {board}
        </KanbanBoard>
      </div>
    </>
  );
};

const Board = () => {
  return <NotionDemo />;
};

export default Board;
